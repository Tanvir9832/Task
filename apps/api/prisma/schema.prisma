// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//! User
model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  profile    Profile?
  AssignedTo Task[]    @relation("AssignedTo")
  TaskOwner  Task[]    @relation("TaskOwner")
  subtask    SubTask[]
}

//! User profile 
model Profile {
  id     Int     @id @default(autoincrement())
  name   String
  avatar String? @default("https://upload.wikimedia.org/wikipedia/commons/7/7c/Profile_avatar_placeholder_large.png")
  gender Gender?
  user   User?   @relation(fields: [userId], references: [id])
  userId Int?    @unique
}

enum Gender {
  Male
  Female
}

//! Task
model Task {
  id             Int       @id @default(autoincrement())
  taskName       String
  description    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  status         Status    @default(PENDING)
  assigned       User      @relation("AssignedTo", fields: [assignedUserId], references: [id])
  assignedUserId Int
  subTask        SubTask[]
  owner          User      @relation("TaskOwner", fields: [ownerId], references: [id])
  ownerId        Int
}

//! Sub task
model SubTask {
  id        Int      @id @default(autoincrement())
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assigned  User     @relation(fields: [userId], references: [id])
  userId    Int
  status    Status   @default(PENDING)
}

enum Status {
  PENDING
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
}
